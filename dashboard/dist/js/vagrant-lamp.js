(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

require('./modules/config-key-change');

require('./modules/toggle-thing');

},{"./modules/config-key-change":2,"./modules/toggle-thing":3}],2:[function(require,module,exports){
"use strict";

var _xhr = _interopRequireDefault(require("./xhr"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AJAX_URL = '/api';

window.vvva_ajax_site_config = function ($elm, response) {};

var $key_select = document.querySelector('.js--key-select');

if ($key_select) {
  $key_select.addEventListener('change', function (e) {
    e.preventDefault();
    var $elm = e.target;
    var sitename = $elm.value;
    var action = $elm.dataset.action;
    (0, _xhr.default)(AJAX_URL, {
      action: action,
      sitename: sitename
    }, 'json').then(function (res) {
      var response = res.target.response;
      var action = response.action.replace('/-/g', '_');
      window['vvva_ajax_' + action]($elm, response);
    }).catch(function (err) {
      console.log('error', err);
    });
  });
}

},{"./xhr":4}],3:[function(require,module,exports){
"use strict";

var _xhr = _interopRequireDefault(require("./xhr"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var $ajax_links = document.querySelectorAll('.js--ajax');
var AJAX_URL = '/api';

window.vvva_ajax_xdebug = function ($elm, response) {
  var status = response.status;
  var $parent = $elm.closest('li');
  var $badge = $parent.querySelector('.badge');
  $elm.setAttribute('data-data', response.status);

  if (status === 'on') {
    $badge.classList.remove('badge-success');
    $badge.classList.add('badge-secondary');
    $badge.innerText = 'off';
  } else {
    $badge.classList.remove('badge-secondary');
    $badge.classList.add('badge-success');
    $badge.innerText = 'on';
  }
};

$ajax_links.forEach(function ($elm, i) {
  $elm.addEventListener('click', function (e) {
    e.preventDefault();
    var _$elm$dataset = $elm.dataset,
        action = _$elm$dataset.action,
        data = _$elm$dataset.data;
    (0, _xhr.default)(AJAX_URL, {
      action: action,
      data: data
    }, 'json').then(function (res) {
      var response = res.target.response;
      window['vvva_ajax_' + response.action]($elm, response);
    }).catch(function (err) {
      console.log('error', err);
    });
  });
});

},{"./xhr":4}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(url, obj) {
  var responseType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'json';
  var xhr = new XMLHttpRequest();
  return new Promise(function (resolve, reject) {
    var params = 'action=' + obj.action + '&data=' + JSON.stringify(obj.data);
    var urlArgs = url + '?' + params;
    xhr.open('POST', urlArgs);
    xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    xhr.responseType = 'json';

    xhr.onload = function (res) {
      if (xhr.status >= 200 && xhr.status < 300) resolve(res);else reject('something bad happened');
    };

    xhr.send();
  });
}

;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJlbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKCcuL21vZHVsZXMvY29uZmlnLWtleS1jaGFuZ2UnKTtcblxucmVxdWlyZSgnLi9tb2R1bGVzL3RvZ2dsZS10aGluZycpO1xuXG59LHtcIi4vbW9kdWxlcy9jb25maWcta2V5LWNoYW5nZVwiOjIsXCIuL21vZHVsZXMvdG9nZ2xlLXRoaW5nXCI6M31dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfeGhyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi94aHJcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgQUpBWF9VUkwgPSAnL2FwaSc7XG5cbndpbmRvdy52dnZhX2FqYXhfc2l0ZV9jb25maWcgPSBmdW5jdGlvbiAoJGVsbSwgcmVzcG9uc2UpIHt9O1xuXG52YXIgJGtleV9zZWxlY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtLWtleS1zZWxlY3QnKTtcblxuaWYgKCRrZXlfc2VsZWN0KSB7XG4gICRrZXlfc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciAkZWxtID0gZS50YXJnZXQ7XG4gICAgdmFyIHNpdGVuYW1lID0gJGVsbS52YWx1ZTtcbiAgICB2YXIgYWN0aW9uID0gJGVsbS5kYXRhc2V0LmFjdGlvbjtcbiAgICAoMCwgX3hoci5kZWZhdWx0KShBSkFYX1VSTCwge1xuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBzaXRlbmFtZTogc2l0ZW5hbWVcbiAgICB9LCAnanNvbicpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgdmFyIHJlc3BvbnNlID0gcmVzLnRhcmdldC5yZXNwb25zZTtcbiAgICAgIHZhciBhY3Rpb24gPSByZXNwb25zZS5hY3Rpb24ucmVwbGFjZSgnLy0vZycsICdfJyk7XG4gICAgICB3aW5kb3dbJ3Z2dmFfYWpheF8nICsgYWN0aW9uXSgkZWxtLCByZXNwb25zZSk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgY29uc29sZS5sb2coJ2Vycm9yJywgZXJyKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbn0se1wiLi94aHJcIjo0fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF94aHIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3hoclwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciAkYWpheF9saW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy0tYWpheCcpO1xudmFyIEFKQVhfVVJMID0gJy9hcGknO1xuXG53aW5kb3cudnZ2YV9hamF4X3hkZWJ1ZyA9IGZ1bmN0aW9uICgkZWxtLCByZXNwb25zZSkge1xuICB2YXIgc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICB2YXIgJHBhcmVudCA9ICRlbG0uY2xvc2VzdCgnbGknKTtcbiAgdmFyICRiYWRnZSA9ICRwYXJlbnQucXVlcnlTZWxlY3RvcignLmJhZGdlJyk7XG4gICRlbG0uc2V0QXR0cmlidXRlKCdkYXRhLWRhdGEnLCByZXNwb25zZS5zdGF0dXMpO1xuXG4gIGlmIChzdGF0dXMgPT09ICdvbicpIHtcbiAgICAkYmFkZ2UuY2xhc3NMaXN0LnJlbW92ZSgnYmFkZ2Utc3VjY2VzcycpO1xuICAgICRiYWRnZS5jbGFzc0xpc3QuYWRkKCdiYWRnZS1zZWNvbmRhcnknKTtcbiAgICAkYmFkZ2UuaW5uZXJUZXh0ID0gJ29mZic7XG4gIH0gZWxzZSB7XG4gICAgJGJhZGdlLmNsYXNzTGlzdC5yZW1vdmUoJ2JhZGdlLXNlY29uZGFyeScpO1xuICAgICRiYWRnZS5jbGFzc0xpc3QuYWRkKCdiYWRnZS1zdWNjZXNzJyk7XG4gICAgJGJhZGdlLmlubmVyVGV4dCA9ICdvbic7XG4gIH1cbn07XG5cbiRhamF4X2xpbmtzLmZvckVhY2goZnVuY3Rpb24gKCRlbG0sIGkpIHtcbiAgJGVsbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBfJGVsbSRkYXRhc2V0ID0gJGVsbS5kYXRhc2V0LFxuICAgICAgICBhY3Rpb24gPSBfJGVsbSRkYXRhc2V0LmFjdGlvbixcbiAgICAgICAgZGF0YSA9IF8kZWxtJGRhdGFzZXQuZGF0YTtcbiAgICAoMCwgX3hoci5kZWZhdWx0KShBSkFYX1VSTCwge1xuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSwgJ2pzb24nKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIHZhciByZXNwb25zZSA9IHJlcy50YXJnZXQucmVzcG9uc2U7XG4gICAgICB3aW5kb3dbJ3Z2dmFfYWpheF8nICsgcmVzcG9uc2UuYWN0aW9uXSgkZWxtLCByZXNwb25zZSk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgY29uc29sZS5sb2coJ2Vycm9yJywgZXJyKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcblxufSx7XCIuL3hoclwiOjR9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5cbmZ1bmN0aW9uIF9kZWZhdWx0KHVybCwgb2JqKSB7XG4gIHZhciByZXNwb25zZVR5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdqc29uJztcbiAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBwYXJhbXMgPSAnYWN0aW9uPScgKyBvYmouYWN0aW9uICsgJyZkYXRhPScgKyBKU09OLnN0cmluZ2lmeShvYmouZGF0YSk7XG4gICAgdmFyIHVybEFyZ3MgPSB1cmwgKyAnPycgKyBwYXJhbXM7XG4gICAgeGhyLm9wZW4oJ1BPU1QnLCB1cmxBcmdzKTtcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xuICAgIHhoci5yZXNwb25zZVR5cGUgPSAnanNvbic7XG5cbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKHJlcykge1xuICAgICAgaWYgKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDApIHJlc29sdmUocmVzKTtlbHNlIHJlamVjdCgnc29tZXRoaW5nIGJhZCBoYXBwZW5lZCcpO1xuICAgIH07XG5cbiAgICB4aHIuc2VuZCgpO1xuICB9KTtcbn1cblxuO1xuXG59LHt9XX0se30sWzFdKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeUxYQmhZMnN2WDNCeVpXeDFaR1V1YW5NaUxDSmZjM0pqTDJwekwyVnVkSEo1TG1weklpd2lYM055WXk5cWN5OXRiMlIxYkdWekwyTnZibVpwWnkxclpYa3RZMmhoYm1kbExtcHpJaXdpWDNOeVl5OXFjeTl0YjJSMWJHVnpMM1J2WjJkc1pTMTBhR2x1Wnk1cWN5SXNJbDl6Y21NdmFuTXZiVzlrZFd4bGN5OTRhSEl1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdPenRCUTBGQkxFOUJRVThzUTBGQlF5dzJRa0ZCUkN4RFFVRlFPenRCUVVOQkxFOUJRVThzUTBGQlF5eDNRa0ZCUkN4RFFVRlFPenM3T3p0QlEwUkJPenM3TzBGQlEwRXNTVUZCVFN4UlFVRlJMRWRCUVVjc1RVRkJha0k3TzBGQlJVRXNUVUZCVFN4RFFVRkRMSEZDUVVGUUxFZEJRU3RDTEZWQlFWY3NTVUZCV0N4RlFVRnBRaXhSUVVGcVFpeEZRVUUwUWl4RFFVVXhSQ3hEUVVaRU96dEJRVWxCTEVsQlFVMHNWMEZCVnl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGVUxFTkJRWFZDTEdsQ1FVRjJRaXhEUVVGd1FqczdRVUZEUVN4SlFVRkpMRmRCUVVvc1JVRkJhVUk3UVVGRFppeEZRVUZCTEZkQlFWY3NRMEZCUXl4blFrRkJXaXhEUVVORkxGRkJSRVlzUlVGRlJTeFZRVUZWTEVOQlFWWXNSVUZCWVR0QlFVTllMRWxCUVVFc1EwRkJReXhEUVVGRExHTkJRVVk3UVVGRFFTeFJRVUZOTEVsQlFVa3NSMEZCVHl4RFFVRkRMRU5CUVVNc1RVRkJia0k3UVVGRFFTeFJRVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJkRUk3UVVGRFFTeFJRVUZOTEUxQlFVMHNSMEZCU3l4SlFVRkpMRU5CUVVNc1QwRkJUQ3hEUVVGaExFMUJRVGxDTzBGQlJVRXNjMEpCUVVrc1VVRkJTaXhGUVVGak8wRkJRVU1zVFVGQlFTeE5RVUZOTEVWQlFVNHNUVUZCUkR0QlFVRlRMRTFCUVVFc1VVRkJVU3hGUVVGU08wRkJRVlFzUzBGQlpDeEZRVUZyUXl4TlFVRnNReXhGUVVORExFbEJSRVFzUTBGRFRTeFZRVUZETEVkQlFVUXNSVUZCVXp0QlFVTllMRlZCUVUwc1VVRkJVU3hIUVVGSExFZEJRVWNzUTBGQlF5eE5RVUZLTEVOQlFWY3NVVUZCTlVJN1FVRkZRU3hWUVVGTkxFMUJRVTBzUjBGQlJ5eFJRVUZSTEVOQlFVTXNUVUZCVkN4RFFVRm5RaXhQUVVGb1FpeERRVUYzUWl4TlFVRjRRaXhGUVVFclFpeEhRVUV2UWl4RFFVRm1PMEZCUTBFc1RVRkJRU3hOUVVGTkxFTkJRVU1zWlVGQlpTeE5RVUZvUWl4RFFVRk9MRU5CUVRoQ0xFbEJRVGxDTEVWQlFXOURMRkZCUVhCRE8wRkJRMGdzUzBGT1JDeEZRVTlETEV0QlVFUXNRMEZQVHl4VlFVRkRMRWRCUVVRc1JVRkJVenRCUVVOa0xFMUJRVUVzVDBGQlR5eERRVUZETEVkQlFWSXNRMEZCV1N4UFFVRmFMRVZCUVhGQ0xFZEJRWEpDTzBGQlEwUXNTMEZVUkR0QlFWVkVMRWRCYkVKSU8wRkJjVUpFT3pzN096dEJRemxDUkRzN096dEJRVVZCTEVsQlFVMHNWMEZCVnl4SFFVRkhMRkZCUVZFc1EwRkJReXhuUWtGQlZDeERRVUV3UWl4WFFVRXhRaXhEUVVGd1FqdEJRVU5CTEVsQlFVMHNVVUZCVVN4SFFVRkhMRTFCUVdwQ096dEJRVWRCTEUxQlFVMHNRMEZCUXl4blFrRkJVQ3hIUVVFd1FpeFZRVUZUTEVsQlFWUXNSVUZCWlN4UlFVRm1MRVZCUVhsQ08wRkJRMnBFTEUxQlFVMHNUVUZCVFN4SFFVRkhMRkZCUVZFc1EwRkJReXhOUVVGNFFqdEJRVU5CTEUxQlFVMHNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGTUxFTkJRV0VzU1VGQllpeERRVUZvUWp0QlFVTkJMRTFCUVUwc1RVRkJUU3hIUVVGSExFOUJRVThzUTBGQlF5eGhRVUZTTEVOQlFYTkNMRkZCUVhSQ0xFTkJRV1k3UVVGRFFTeEZRVUZCTEVsQlFVa3NRMEZCUXl4WlFVRk1MRU5CUVd0Q0xGZEJRV3hDTEVWQlFTdENMRkZCUVZFc1EwRkJReXhOUVVGNFF6czdRVUZGUVN4TlFVRkpMRTFCUVUwc1MwRkJTeXhKUVVGbUxFVkJRWEZDTzBGQlEyNUNMRWxCUVVFc1RVRkJUU3hEUVVGRExGTkJRVkFzUTBGQmFVSXNUVUZCYWtJc1EwRkJkMElzWlVGQmVFSTdRVUZEUVN4SlFVRkJMRTFCUVUwc1EwRkJReXhUUVVGUUxFTkJRV2xDTEVkQlFXcENMRU5CUVhGQ0xHbENRVUZ5UWp0QlFVTkJMRWxCUVVFc1RVRkJUU3hEUVVGRExGTkJRVkFzUjBGQmJVSXNTMEZCYmtJN1FVRkRSQ3hIUVVwRUxFMUJTVTg3UVVGRFRDeEpRVUZCTEUxQlFVMHNRMEZCUXl4VFFVRlFMRU5CUVdsQ0xFMUJRV3BDTEVOQlFYZENMR2xDUVVGNFFqdEJRVU5CTEVsQlFVRXNUVUZCVFN4RFFVRkRMRk5CUVZBc1EwRkJhVUlzUjBGQmFrSXNRMEZCY1VJc1pVRkJja0k3UVVGRFFTeEpRVUZCTEUxQlFVMHNRMEZCUXl4VFFVRlFMRWRCUVcxQ0xFbEJRVzVDTzBGQlEwUTdRVUZEUml4RFFXWkVPenRCUVdsQ1FTeFhRVUZYTEVOQlFVTXNUMEZCV2l4RFFVRnZRaXhWUVVGRExFbEJRVVFzUlVGQlRTeERRVUZPTEVWQlFWazdRVUZET1VJc1JVRkJRU3hKUVVGSkxFTkJRVU1zWjBKQlFVd3NRMEZEUlN4UFFVUkdMRVZCUlVVc1ZVRkJWU3hEUVVGV0xFVkJRV0U3UVVGRFdDeEpRVUZCTEVOQlFVTXNRMEZCUXl4alFVRkdPMEZCUlVFc2QwSkJRWFZDTEVsQlFVa3NRMEZCUXl4UFFVRTFRanRCUVVGQkxGRkJRVThzVFVGQlVDeHBRa0ZCVHl4TlFVRlFPMEZCUVVFc1VVRkJaU3hKUVVGbUxHbENRVUZsTEVsQlFXWTdRVUZGUVN4elFrRkJTU3hSUVVGS0xFVkJRV003UVVGQlF5eE5RVUZCTEUxQlFVMHNSVUZCVGl4TlFVRkVPMEZCUVZNc1RVRkJRU3hKUVVGSkxFVkJRVW83UVVGQlZDeExRVUZrTEVWQlFUaENMRTFCUVRsQ0xFVkJRME1zU1VGRVJDeERRVU5OTEZWQlFVTXNSMEZCUkN4RlFVRlRPMEZCUTJJc1ZVRkJUU3hSUVVGUkxFZEJRVWNzUjBGQlJ5eERRVUZETEUxQlFVb3NRMEZCVnl4UlFVRTFRanRCUVVOQkxFMUJRVUVzVFVGQlRTeERRVUZETEdWQlFXVXNVVUZCVVN4RFFVRkRMRTFCUVhwQ0xFTkJRVTRzUTBGQmRVTXNTVUZCZGtNc1JVRkJOa01zVVVGQk4wTTdRVUZEUkN4TFFVcEVMRVZCUzBNc1MwRk1SQ3hEUVV0UExGVkJRVU1zUjBGQlJDeEZRVUZUTzBGQlEyUXNUVUZCUVN4UFFVRlBMRU5CUVVNc1IwRkJVaXhEUVVGWkxFOUJRVm9zUlVGQmNVSXNSMEZCY2tJN1FVRkRSQ3hMUVZCRU8wRkJVVVFzUjBGbVNEdEJRV2xDUkN4RFFXeENSRHM3T3pzN096czdPenRCUTNaQ1pTeHJRa0ZCVlN4SFFVRldMRVZCUVdVc1IwRkJaaXhGUVVFeVF6dEJRVUZCTEUxQlFYWkNMRmxCUVhWQ0xIVkZRVUZTTEUxQlFWRTdRVUZEZUVRc1RVRkJUU3hIUVVGSExFZEJRVWNzU1VGQlNTeGpRVUZLTEVWQlFWbzdRVUZGUVN4VFFVRlBMRWxCUVVrc1QwRkJTaXhEUVVGWkxGVkJRVU1zVDBGQlJDeEZRVUZWTEUxQlFWWXNSVUZCY1VJN1FVRkRkRU1zVVVGQlRTeE5RVUZOTEVkQlFVY3NXVUZCV1N4SFFVRkhMRU5CUVVNc1RVRkJhRUlzUjBGQmVVSXNVVUZCZWtJc1IwRkJiME1zU1VGQlNTeERRVUZETEZOQlFVd3NRMEZCWlN4SFFVRkhMRU5CUVVNc1NVRkJia0lzUTBGQmJrUTdRVUZEUVN4UlFVRk5MRTlCUVU4c1IwRkJSeXhIUVVGSExFZEJRVWNzUjBGQlRpeEhRVUZaTEUxQlFUVkNPMEZCUlVFc1NVRkJRU3hIUVVGSExFTkJRVU1zU1VGQlNpeERRVUZUTEUxQlFWUXNSVUZCYVVJc1QwRkJha0k3UVVGRFFTeEpRVUZCTEVkQlFVY3NRMEZCUXl4blFrRkJTaXhEUVVGeFFpeGpRVUZ5UWl4RlFVRnhReXh0UTBGQmNrTTdRVUZEUVN4SlFVRkJMRWRCUVVjc1EwRkJReXhaUVVGS0xFZEJRVzFDTEUxQlFXNUNPenRCUVVWQkxFbEJRVUVzUjBGQlJ5eERRVUZETEUxQlFVb3NSMEZCWVN4VlFVRkRMRWRCUVVRc1JVRkJVenRCUVVOd1FpeFZRVUZKTEVkQlFVY3NRMEZCUXl4TlFVRktMRWxCUVdNc1IwRkJaQ3hKUVVGeFFpeEhRVUZITEVOQlFVTXNUVUZCU2l4SFFVRmhMRWRCUVhSRExFVkJRVEpETEU5QlFVOHNRMEZCUXl4SFFVRkVMRU5CUVZBc1EwRkJNME1zUzBGRFN5eE5RVUZOTEVOQlFVTXNkMEpCUVVRc1EwRkJUanRCUVVOT0xFdEJTRVE3TzBGQlMwRXNTVUZCUVN4SFFVRkhMRU5CUVVNc1NVRkJTanRCUVVORUxFZEJaRTBzUTBGQlVEdEJRV1ZFT3p0QlFVRkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0b0tYdG1kVzVqZEdsdmJpQnlLR1VzYml4MEtYdG1kVzVqZEdsdmJpQnZLR2tzWmlsN2FXWW9JVzViYVYwcGUybG1LQ0ZsVzJsZEtYdDJZWElnWXoxY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQnlaWEYxYVhKbEppWnlaWEYxYVhKbE8ybG1LQ0ZtSmlaaktYSmxkSFZ5YmlCaktHa3NJVEFwTzJsbUtIVXBjbVYwZFhKdUlIVW9hU3doTUNrN2RtRnlJR0U5Ym1WM0lFVnljbTl5S0Z3aVEyRnVibTkwSUdacGJtUWdiVzlrZFd4bElDZGNJaXRwSzF3aUoxd2lLVHQwYUhKdmR5QmhMbU52WkdVOVhDSk5UMFJWVEVWZlRrOVVYMFpQVlU1RVhDSXNZWDEyWVhJZ2NEMXVXMmxkUFh0bGVIQnZjblJ6T250OWZUdGxXMmxkV3pCZExtTmhiR3dvY0M1bGVIQnZjblJ6TEdaMWJtTjBhVzl1S0hJcGUzWmhjaUJ1UFdWYmFWMWJNVjFiY2wwN2NtVjBkWEp1SUc4b2JueDhjaWw5TEhBc2NDNWxlSEJ2Y25SekxISXNaU3h1TEhRcGZYSmxkSFZ5YmlCdVcybGRMbVY0Y0c5eWRITjlabTl5S0haaGNpQjFQVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUhKbGNYVnBjbVVtSm5KbGNYVnBjbVVzYVQwd08yazhkQzVzWlc1bmRHZzdhU3NyS1c4b2RGdHBYU2s3Y21WMGRYSnVJRzk5Y21WMGRYSnVJSEo5S1NncElpd2ljbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMk52Ym1acFp5MXJaWGt0WTJoaGJtZGxKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdmRHOW5aMnhsTFhSb2FXNW5KeWs3SWl3aWFXMXdiM0owSUZoSVVpQm1jbTl0SUNjdUwzaG9jaWM3WEc1amIyNXpkQ0JCU2tGWVgxVlNUQ0E5SUNjdllYQnBKMXh1WEc1M2FXNWtiM2N1ZG5aMllWOWhhbUY0WDNOcGRHVmZZMjl1Wm1sbklEMGdablZ1WTNScGIyNGdLQ0FrWld4dExDQnlaWE53YjI1elpTQXBJSHRjYmlBZ1hHNTlYRzVjYm1OdmJuTjBJQ1JyWlhsZmMyVnNaV04wSUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduTG1wekxTMXJaWGt0YzJWc1pXTjBKeWs3WEc1cFppQW9KR3RsZVY5elpXeGxZM1FwSUh0Y2JpQWdKR3RsZVY5elpXeGxZM1F1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhjYmlBZ0lDQW5ZMmhoYm1kbEp5eGNiaUFnSUNCbWRXNWpkR2x2YmlBb1pTa2dlMXh1SUNBZ0lDQWdaUzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh1SUNBZ0lDQWdZMjl1YzNRZ0pHVnNiU0FnSUNBZ1BTQmxMblJoY21kbGREdGNiaUFnSUNBZ0lHTnZibk4wSUhOcGRHVnVZVzFsSUQwZ0pHVnNiUzUyWVd4MVpUdGNiaUFnSUNBZ0lHTnZibk4wSUdGamRHbHZiaUFnSUQwZ0pHVnNiUzVrWVhSaGMyVjBMbUZqZEdsdmJqdGNibHh1SUNBZ0lDQWdXRWhTS0VGS1FWaGZWVkpNTENCN1lXTjBhVzl1TENCemFYUmxibUZ0Wlgwc0lDZHFjMjl1SnlsY2JpQWdJQ0FnSUM1MGFHVnVLQ2h5WlhNcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J5WlhOd2IyNXpaU0E5SUhKbGN5NTBZWEpuWlhRdWNtVnpjRzl1YzJVN1hHNWNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQmhZM1JwYjI0Z1BTQnlaWE53YjI1elpTNWhZM1JwYjI0dWNtVndiR0ZqWlNnbkx5MHZaeWNzSjE4bktUdGNiaUFnSUNBZ0lDQWdJQ0IzYVc1a2IzZGJKM1oyZG1GZllXcGhlRjhuSUNzZ1lXTjBhVzl1WFNna1pXeHRMQ0J5WlhOd2IyNXpaU2s3WEc0Z0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnTG1OaGRHTm9LQ2hsY25JcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyVnljbTl5Snl3Z1pYSnlLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmlBZ0tUdGNiaUFnWEc1OVhHNGlMQ0pwYlhCdmNuUWdXRWhTSUdaeWIyMGdKeTR2ZUdoeUp6dGNibHh1WTI5dWMzUWdKR0ZxWVhoZmJHbHVhM01nUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NjdWFuTXRMV0ZxWVhnbktUdGNibU52Ym5OMElFRktRVmhmVlZKTUlEMGdKeTloY0drblhHNWNibHh1ZDJsdVpHOTNMbloyZG1GZllXcGhlRjk0WkdWaWRXY2dQU0JtZFc1amRHbHZiaWdrWld4dExDQnlaWE53YjI1elpTa2dlMXh1SUNCamIyNXpkQ0J6ZEdGMGRYTWdQU0J5WlhOd2IyNXpaUzV6ZEdGMGRYTTdYRzRnSUdOdmJuTjBJQ1J3WVhKbGJuUWdQU0FrWld4dExtTnNiM05sYzNRb0oyeHBKeWs3WEc0Z0lHTnZibk4wSUNSaVlXUm5aU0E5SUNSd1lYSmxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25MbUpoWkdkbEp5azdYRzRnSUNSbGJHMHVjMlYwUVhSMGNtbGlkWFJsS0Nka1lYUmhMV1JoZEdFbkxDQnlaWE53YjI1elpTNXpkR0YwZFhNcE8xeHVJQ0JjYmlBZ2FXWWdLSE4wWVhSMWN5QTlQVDBnSjI5dUp5a2dlMXh1SUNBZ0lDUmlZV1JuWlM1amJHRnpjMHhwYzNRdWNtVnRiM1psS0NkaVlXUm5aUzF6ZFdOalpYTnpKeWs3WEc0Z0lDQWdKR0poWkdkbExtTnNZWE56VEdsemRDNWhaR1FvSjJKaFpHZGxMWE5sWTI5dVpHRnllU2NwTzF4dUlDQWdJQ1JpWVdSblpTNXBibTVsY2xSbGVIUWdQU0FuYjJabUp6dGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQWtZbUZrWjJVdVkyeGhjM05NYVhOMExuSmxiVzkyWlNnblltRmtaMlV0YzJWamIyNWtZWEo1SnlrN1hHNGdJQ0FnSkdKaFpHZGxMbU5zWVhOelRHbHpkQzVoWkdRb0oySmhaR2RsTFhOMVkyTmxjM01uS1R0Y2JpQWdJQ0FrWW1Ga1oyVXVhVzV1WlhKVVpYaDBJRDBnSjI5dUp6dGNiaUFnZlZ4dWZWeHVYRzRrWVdwaGVGOXNhVzVyY3k1bWIzSkZZV05vS0Nna1pXeHRMR2twSUQwK0lIdGNiaUFnSkdWc2JTNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGeHVJQ0FnSUNkamJHbGpheWNzWEc0Z0lDQWdablZ1WTNScGIyNGdLR1VwSUh0Y2JpQWdJQ0FnSUdVdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1RzZ1hHNGdJQ0FnSUNCY2JpQWdJQ0FnSUdOdmJuTjBJSHRoWTNScGIyNHNJR1JoZEdGOUlEMGdKR1ZzYlM1a1lYUmhjMlYwWEc0Z0lDQWdJQ0JjYmlBZ0lDQWdJRmhJVWloQlNrRllYMVZTVEN3Z2UyRmpkR2x2Yml3Z1pHRjBZWDBzSUNkcWMyOXVKeWxjYmlBZ0lDQWdJQzUwYUdWdUtDaHlaWE1wSUQwK0lIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVnpjRzl1YzJVZ1BTQnlaWE11ZEdGeVoyVjBMbkpsYzNCdmJuTmxPeUJjYmlBZ0lDQWdJQ0FnZDJsdVpHOTNXeWQyZG5aaFgyRnFZWGhmSnlBcklISmxjM0J2Ym5ObExtRmpkR2x2Ymwwb0pHVnNiU3dnY21WemNHOXVjMlVwTzF4dUlDQWdJQ0FnZlNsY2JpQWdJQ0FnSUM1allYUmphQ2dvWlhKeUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGxjbkp2Y2ljc0lHVnljaWs3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdLVHRjYm4wcE8xeHVJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdLSFZ5YkN3Z2IySnFMQ0J5WlhOd2IyNXpaVlI1Y0dVZ1BTQW5hbk52YmljcElIdGNiaUFnWTI5dWMzUWdlR2h5SUQwZ2JtVjNJRmhOVEVoMGRIQlNaWEYxWlhOMEtDazdYRzVjYmlBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabExDQnlaV3BsWTNRcElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCd1lYSmhiWE1nUFNBbllXTjBhVzl1UFNjZ0t5QnZZbW91WVdOMGFXOXVJQ3NnSnlaa1lYUmhQU2NnS3lCS1UwOU9Mbk4wY21sdVoybG1lU2h2WW1vdVpHRjBZU2s3WEc0Z0lDQWdZMjl1YzNRZ2RYSnNRWEpuY3lBOUlIVnliQ0FySUNjL0p5QXJJSEJoY21GdGN6dGNibHh1SUNBZ0lIaG9jaTV2Y0dWdUtDZFFUMU5VSnl3Z2RYSnNRWEpuY3lrN1hHNGdJQ0FnZUdoeUxuTmxkRkpsY1hWbGMzUklaV0ZrWlhJb0owTnZiblJsYm5RdGRIbHdaU2NzSUNkaGNIQnNhV05oZEdsdmJpOTRMWGQzZHkxbWIzSnRMWFZ5YkdWdVkyOWtaV1FuS1R0Y2JpQWdJQ0I0YUhJdWNtVnpjRzl1YzJWVWVYQmxJRDBnSjJwemIyNG5PMXh1WEc0Z0lDQWdlR2h5TG05dWJHOWhaQ0E5SUNoeVpYTXBJRDArSUh0Y2JpQWdJQ0FnSUdsbUlDaDRhSEl1YzNSaGRIVnpJRDQ5SURJd01DQW1KaUI0YUhJdWMzUmhkSFZ6SUR3Z016QXdLU0J5WlhOdmJIWmxLSEpsY3lrN1hHNGdJQ0FnSUNCbGJITmxJSEpsYW1WamRDZ25jMjl0WlhSb2FXNW5JR0poWkNCb1lYQndaVzVsWkNjcFhHNGdJQ0FnZlR0Y2JseHVJQ0FnSUhob2NpNXpaVzVrS0NrN1hHNGdJSDBwTzF4dWZUc2lYWDA9XG4iXSwiZmlsZSI6InZhZ3JhbnQtbGFtcC5qcyJ9
